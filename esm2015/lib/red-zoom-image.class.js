export class RedZoomImage {
    constructor(element = null, listener = () => { }, className = null) {
        this.element = element;
        this.listener = listener;
        this.loading = false;
        this.isFirst = true;
        if (element === null) {
            this.element = document.createElement('img');
        }
        const _listener = () => {
            if (this.status !== 'loading') {
                this.isFirst = false;
            }
            this.listener();
        };
        this.element.addEventListener('load', _listener);
        this.element.addEventListener('error', _listener);
        this.destroy = () => {
            this.element.removeEventListener('load', _listener);
            this.element.removeEventListener('error', _listener);
        };
        if (className !== null) {
            this.element.classList.add(className);
        }
    }
    get width() {
        return this.element.width;
    }
    get height() {
        return this.element.height;
    }
    get size() {
        return { x: this.width, y: this.height };
    }
    get naturalWidth() {
        return this.element.naturalWidth;
    }
    get naturalHeight() {
        return this.element.naturalHeight;
    }
    get naturalSize() {
        return { x: this.naturalWidth, y: this.naturalHeight };
    }
    get style() {
        return this.element.style;
    }
    set styleSize(value) {
        this.element.style.width = value.x;
        this.element.style.height = value.y;
    }
    get status() {
        if (this.loading) {
            return 'loading';
        }
        if (this.element.complete) {
            if (!this.element.src) {
                return 'loading';
            }
            else if (this.naturalWidth === 0) {
                return 'error';
            }
            return 'loaded';
        }
        return 'loading';
    }
    set src(value) {
        this.loading = false;
        this.element.setAttribute('src', value);
    }
    reset() {
        this.loading = true;
        this.listener();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkLXpvb20taW1hZ2UuY2xhc3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXJlZC16b29tL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9yZWQtem9vbS1pbWFnZS5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQU8sWUFBWTtJQTZEckIsWUFDVyxVQUE0QixJQUFJLEVBQ2hDLFdBQXVCLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFDdEMsWUFBb0IsSUFBSTtRQUZqQixZQUFPLEdBQVAsT0FBTyxDQUF5QjtRQUNoQyxhQUFRLEdBQVIsUUFBUSxDQUF1QjtRQTlEbEMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUV4QixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBK0RYLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7WUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDO1FBRUYsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7SUFwRkQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUEwQjtRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtnQkFDbkIsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLENBQUMsRUFBRTtnQkFDaEMsT0FBTyxPQUFPLENBQUM7YUFDbEI7WUFFRCxPQUFPLFFBQVEsQ0FBQztTQUNuQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLEdBQUcsQ0FBQyxLQUFhO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBZ0NELEtBQUs7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztDQUdKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVkWm9vbVN0YXR1cyB9IGZyb20gJy4vcmVkLXpvb20tc3RhdHVzLnR5cGUnO1xuaW1wb3J0ICogYXMgdmVjdG9yIGZyb20gJy4vdmVjdG9yJztcblxuXG5leHBvcnQgY2xhc3MgUmVkWm9vbUltYWdlIHtcbiAgICBwcml2YXRlIGxvYWRpbmcgPSBmYWxzZTtcblxuICAgIGlzRmlyc3QgPSB0cnVlO1xuXG4gICAgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQud2lkdGg7XG4gICAgfVxuXG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmhlaWdodDtcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiB2ZWN0b3IuVmVjdG9yTnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHt4OiB0aGlzLndpZHRoLCB5OiB0aGlzLmhlaWdodH07XG4gICAgfVxuXG4gICAgZ2V0IG5hdHVyYWxXaWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdHVyYWxXaWR0aDtcbiAgICB9XG5cbiAgICBnZXQgbmF0dXJhbEhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XG4gICAgfVxuXG4gICAgZ2V0IG5hdHVyYWxTaXplKCk6IHZlY3Rvci5WZWN0b3JOdW1iZXIge1xuICAgICAgICByZXR1cm4ge3g6IHRoaXMubmF0dXJhbFdpZHRoLCB5OiB0aGlzLm5hdHVyYWxIZWlnaHR9O1xuICAgIH1cblxuICAgIGdldCBzdHlsZSgpOiBDU1NTdHlsZURlY2xhcmF0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgICB9XG5cbiAgICBzZXQgc3R5bGVTaXplKHZhbHVlOiB2ZWN0b3IuVmVjdG9yU3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IHZhbHVlLng7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB2YWx1ZS55O1xuICAgIH1cblxuICAgIGdldCBzdGF0dXMoKTogUmVkWm9vbVN0YXR1cyB7XG4gICAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiAnbG9hZGluZyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50LmNvbXBsZXRlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC5zcmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xvYWRpbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5hdHVyYWxXaWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJ2xvYWRlZCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ2xvYWRpbmcnO1xuICAgIH1cblxuICAgIHNldCBzcmModmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgdmFsdWUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogSFRNTEltYWdlRWxlbWVudCA9IG51bGwsXG4gICAgICAgIHB1YmxpYyBsaXN0ZW5lcjogKCkgPT4gdm9pZCA9ICgpID0+IHt9LFxuICAgICAgICBjbGFzc05hbWU6IHN0cmluZyA9IG51bGwsXG4gICAgKSB7XG4gICAgICAgIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IF9saXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIF9saXN0ZW5lcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIF9saXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy5kZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfbGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgX2xpc3RlbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY2xhc3NOYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95OiAoKSA9PiB2b2lkO1xufVxuIl19