function calc(a, op, b) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case 'min': return Math.min(a, b);
        case 'max': return Math.max(a, b);
    }
}
export function fromRectPos(rect) {
    return { x: rect.left, y: rect.top };
}
export function fromRectSize(rect) {
    return { x: rect.width, y: rect.height };
}
export function fromScroll() {
    return { x: scrollX, y: scrollY };
}
export function fromMouseEvent(event) {
    return add({ x: event.clientX, y: event.clientY }, fromScroll());
}
export function op(a, op, b) {
    if (typeof b === 'number') {
        b = { x: b, y: b };
    }
    return {
        x: calc(a.x, op, b.x),
        y: calc(a.y, op, b.y)
    };
}
export function add(a, b) {
    return op(a, '+', b);
}
export function sub(a, b) {
    return op(a, '-', b);
}
export function mul(a, b) {
    return op(a, '*', b);
}
export function div(a, b) {
    return op(a, '/', b);
}
export function min(a, b) {
    return op(a, 'min', b);
}
export function max(a, b) {
    return op(a, 'max', b);
}
export function round(a) {
    return map(a, Math.round);
}
export function map(a, fn) {
    return { x: fn(a.x, 'x'), y: fn(a.y, 'y') };
}
export function equal(a, b) {
    if (typeof b === 'number') {
        b = { x: b, y: b };
    }
    return {
        x: a.x === b.x,
        y: a.y === b.y,
    };
}
export function notEqual(a, b) {
    return { x: a.x !== b.x, y: a.y !== b.y };
}
export function flatMax(a) {
    return Math.max(a.x, a.y);
}
export function flatMin(a) {
    return Math.min(a.x, a.y);
}
export function flatOr(a) {
    return a.x || a.y;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1yZWQtem9vbS9zcmMvIiwic291cmNlcyI6WyJsaWIvdmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsSUFBSSxDQUFDLENBQVMsRUFBRSxFQUFZLEVBQUUsQ0FBUztJQUM1QyxRQUFRLEVBQUUsRUFBRTtRQUNSLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssS0FBSyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsQyxLQUFLLEtBQUssQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckM7QUFDTCxDQUFDO0FBYUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxJQUFnQjtJQUN4QyxPQUFPLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFnQjtJQUN6QyxPQUFPLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVU7SUFDdEIsT0FBTyxFQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBQyxDQUFD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Q0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsQ0FBZTtJQUNuQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsQ0FBZTtJQUNuQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsQ0FBZ0I7SUFDbkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgT3BlcmF0b3IgPSAnKyd8Jy0nfCcqJ3wnLyd8J21pbid8J21heCc7XG5cbmZ1bmN0aW9uIGNhbGMoYTogbnVtYmVyLCBvcDogT3BlcmF0b3IsIGI6IG51bWJlcikge1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSAnKyc6IHJldHVybiBhICsgYjtcbiAgICAgICAgY2FzZSAnLSc6IHJldHVybiBhIC0gYjtcbiAgICAgICAgY2FzZSAnKic6IHJldHVybiBhICogYjtcbiAgICAgICAgY2FzZSAnLyc6IHJldHVybiBhIC8gYjtcbiAgICAgICAgY2FzZSAnbWluJzogcmV0dXJuIE1hdGgubWluKGEsIGIpO1xuICAgICAgICBjYXNlICdtYXgnOiByZXR1cm4gTWF0aC5tYXgoYSwgYik7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvcjxUPiB7XG4gICAgeDogVCxcbiAgICB5OiBULFxufVxuXG5leHBvcnQgdHlwZSBWZWN0b3JOdW1iZXIgPSBWZWN0b3I8bnVtYmVyPjtcblxuZXhwb3J0IHR5cGUgVmVjdG9yU3RyaW5nID0gVmVjdG9yPHN0cmluZz47XG5cbmV4cG9ydCB0eXBlIFZlY3RvckJvb2xlYW4gPSBWZWN0b3I8Ym9vbGVhbj47XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVjdFBvcyhyZWN0OiBDbGllbnRSZWN0KTogVmVjdG9yTnVtYmVyIHtcbiAgICByZXR1cm4ge3g6IHJlY3QubGVmdCwgeTogcmVjdC50b3B9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlY3RTaXplKHJlY3Q6IENsaWVudFJlY3QpOiBWZWN0b3JOdW1iZXIge1xuICAgIHJldHVybiB7eDogcmVjdC53aWR0aCwgeTogcmVjdC5oZWlnaHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjcm9sbCgpOiBWZWN0b3JOdW1iZXIge1xuICAgIHJldHVybiB7eDogc2Nyb2xsWCwgeTogc2Nyb2xsWX07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTW91c2VFdmVudChldmVudDogTW91c2VFdmVudCk6IFZlY3Rvck51bWJlciB7XG4gICAgcmV0dXJuIGFkZCh7eDogZXZlbnQuY2xpZW50WCwgeTogZXZlbnQuY2xpZW50WX0sIGZyb21TY3JvbGwoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcChhOiBWZWN0b3JOdW1iZXIsIG9wOiBPcGVyYXRvciwgYjogVmVjdG9yTnVtYmVyIHwgbnVtYmVyKTogVmVjdG9yTnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGIgPSB7eDogYiwgeTogYn07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogY2FsYyhhLngsIG9wLCBiLngpLFxuICAgICAgICB5OiBjYWxjKGEueSwgb3AsIGIueSlcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkKGE6IFZlY3Rvck51bWJlciwgYjogVmVjdG9yTnVtYmVyIHwgbnVtYmVyKTogVmVjdG9yTnVtYmVyIHtcbiAgICByZXR1cm4gb3AoYSwgJysnLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YihhOiBWZWN0b3JOdW1iZXIsIGI6IFZlY3Rvck51bWJlciB8IG51bWJlcik6IFZlY3Rvck51bWJlciB7XG4gICAgcmV0dXJuIG9wKGEsICctJywgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtdWwoYTogVmVjdG9yTnVtYmVyLCBiOiBWZWN0b3JOdW1iZXIgfCBudW1iZXIpOiBWZWN0b3JOdW1iZXIge1xuICAgIHJldHVybiBvcChhLCAnKicsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2KGE6IFZlY3Rvck51bWJlciwgYjogVmVjdG9yTnVtYmVyIHwgbnVtYmVyKTogVmVjdG9yTnVtYmVyIHtcbiAgICByZXR1cm4gb3AoYSwgJy8nLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihhOiBWZWN0b3JOdW1iZXIsIGI6IFZlY3Rvck51bWJlciB8IG51bWJlcik6IFZlY3Rvck51bWJlciB7XG4gICAgcmV0dXJuIG9wKGEsICdtaW4nLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChhOiBWZWN0b3JOdW1iZXIsIGI6IFZlY3Rvck51bWJlciB8IG51bWJlcik6IFZlY3Rvck51bWJlciB7XG4gICAgcmV0dXJuIG9wKGEsICdtYXgnLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKGE6IFZlY3Rvck51bWJlcik6IFZlY3Rvck51bWJlciB7XG4gICAgcmV0dXJuIG1hcChhLCBNYXRoLnJvdW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcDxULCBCPihhOiBWZWN0b3I8VD4sIGZuOiAoYzogVCwgYXhpczogJ3gnfCd5JykgPT4gQik6IFZlY3RvcjxCPiB7XG4gICAgcmV0dXJuIHt4OiBmbihhLngsICd4JyksIHk6IGZuKGEueSwgJ3knKX07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbChhOiBWZWN0b3JOdW1iZXIsIGI6IFZlY3Rvck51bWJlciB8IG51bWJlcik6IFZlY3RvckJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgYiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYiA9IHt4OiBiLCB5OiBifTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBhLnggPT09IGIueCxcbiAgICAgICAgeTogYS55ID09PSBiLnksXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdEVxdWFsKGE6IFZlY3Rvck51bWJlciwgYjogVmVjdG9yTnVtYmVyKTogVmVjdG9yQm9vbGVhbiB7XG4gICAgcmV0dXJuIHt4OiBhLnggIT09IGIueCwgeTogYS55ICE9PSBiLnl9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1heChhOiBWZWN0b3JOdW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1heChhLngsIGEueSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0TWluKGE6IFZlY3Rvck51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWluKGEueCwgYS55KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXRPcihhOiBWZWN0b3JCb29sZWFuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEueCB8fCBhLnk7XG59XG4iXX0=