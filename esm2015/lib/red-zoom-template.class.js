const ɵ0 = () => {
    let template = null;
    return () => {
        if (!template) {
            template = document.createElement('template');
            template.innerHTML = `<div class="red-zoom">
                <div class="red-zoom__overlay"></div>
                <div class="red-zoom__frame">
                    <div class="red-zoom__frame-body"></div>
                </div>
                <div class="red-zoom__lens">
                    <div class="red-zoom__lens-body"></div>
                </div>
                <div class="red-zoom__error">
                    <div class="red-zoom__error-message"></div>
                </div>
            </div>`;
        }
        return template.content.cloneNode(true).firstChild;
    };
};
const makeTemplate = (ɵ0)();
export class RedZoomTemplate {
    constructor() {
        this._status = null;
        this.appliedClasses = [];
        this.onTransitionEnd = (event) => {
            if (event.propertyName === 'visibility' && this.isHidden) {
                this.template.remove();
            }
        };
        this.template = makeTemplate();
        this.lens = this.template.querySelector('.red-zoom__lens');
        this.lensBody = this.template.querySelector('.red-zoom__lens-body');
        this.frame = this.template.querySelector('.red-zoom__frame');
        this.frameBody = this.template.querySelector('.red-zoom__frame-body');
        this.error = this.template.querySelector('.red-zoom__error');
        this.errorMessage = this.template.querySelector('.red-zoom__error-message');
        this.template.addEventListener('transitionend', this.onTransitionEnd);
        this.status = 'loading';
    }
    set status(state) {
        if (this._status !== null) {
            this.template.classList.remove(`red-zoom--status--${this._status}`);
        }
        this._status = state;
        this.template.classList.add(`red-zoom--status--${state}`);
    }
    get status() {
        return this._status;
    }
    set classes(classes) {
        this.template.classList.remove(...this.appliedClasses);
        classes = classes.trim();
        if (classes) {
            this.appliedClasses = classes.replace(/ +/, ' ').split(' ');
            this.template.classList.add(...this.appliedClasses);
        }
    }
    get isHidden() {
        return getComputedStyle(this.template).visibility === 'hidden';
    }
    setProperties(properties) {
        for (let name in properties) {
            this.template.style.setProperty(name, properties[name]);
        }
    }
    detach() {
        this.template.classList.remove('red-zoom--active');
        if (this.isHidden) {
            this.template.remove();
        }
    }
    attach() {
        if (this.template.parentNode !== document.body) {
            document.body.appendChild(this.template);
        }
    }
    activate() {
        this.template.classList.add('red-zoom--active');
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,