{"version":3,"file":"red-zoom.directive.d.ts","sources":["red-zoom.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { AfterContentInit, ElementRef, NgZone, Renderer2, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { RedZoomTemplate } from './red-zoom-template.class';\nimport { RedZoomStatus } from './red-zoom-status.type';\nimport { RedZoomImage } from './red-zoom-image.class';\nimport * as vector from './vector';\ninterface Session {\n    active: boolean;\n    thumbSize: vector.VectorNumber;\n    thumbPos: vector.VectorNumber;\n    lensContainerSize: vector.VectorNumber;\n    lensImageSize: vector.VectorNumber;\n    frameSize: vector.VectorNumber;\n    mousePos: vector.VectorNumber;\n    destroy: () => void;\n}\nexport declare class RedZoomDirective implements AfterContentInit, OnChanges, OnDestroy {\n    private element;\n    private renderer;\n    private zone;\n    private platformId;\n    src: string;\n    lensSrc: string;\n    thumbSrc: string;\n    lazy: boolean;\n    classes: string;\n    behavior: 'hover' | 'grab' | 'click';\n    wheel: boolean;\n    minScaleFactor: number;\n    maxScaleFactor: number;\n    errorMessage: string;\n    template: RedZoomTemplate;\n    thumbImage: RedZoomImage;\n    frameImage: RedZoomImage;\n    lensImage: RedZoomImage;\n    scaleFactor: number;\n    session: Session;\n    requestAnimationFrameId: any;\n    get isImage(): boolean;\n    get status(): RedZoomStatus;\n    constructor(element: ElementRef, renderer: Renderer2, zone: NgZone, platformId: string);\n    listen(): void;\n    unlisten: () => void;\n    onImageChangeStatus: () => void;\n    onImageChangeStatusDistinct: () => void;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    onChangeThumbSrc(): void;\n    onChangeLensSrc(): void;\n    getThumbSrc(): string;\n    loadLensImage(): void;\n    loadFrameImage(): void;\n    mouseEnter: (event: MouseEvent) => void;\n    onMouseMove: (mousePos: vector.VectorNumber) => void;\n    initSession(): void;\n    calcScaleFactor(): void;\n    calcFrameSize(): void;\n    move(): void;\n    invalidate(): void;\n    forceReflow(): void;\n}\nexport {};\n"]}